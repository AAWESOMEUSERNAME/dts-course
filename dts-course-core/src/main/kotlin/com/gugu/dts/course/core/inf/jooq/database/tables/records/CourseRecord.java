/*
 * This file is generated by jOOQ.
 */
package com.gugu.dts.course.core.inf.jooq.database.tables.records;


import com.gugu.dts.course.core.inf.jooq.database.tables.Course;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CourseRecord extends UpdatableRecordImpl<CourseRecord> implements Record4<Long, String, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = -1189912501;

    /**
     * Setter for <code>dts.course.id</code>. 主键
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>dts.course.id</code>. 主键
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>dts.course.name</code>. 课程名
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>dts.course.name</code>. 课程名
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>dts.course.create_time</code>. 创建时间
     */
    public void setCreateTime(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>dts.course.create_time</code>. 创建时间
     */
    public LocalDateTime getCreateTime() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>dts.course.update_time</code>. 更新时间
     */
    public void setUpdateTime(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>dts.course.update_time</code>. 更新时间
     */
    public LocalDateTime getUpdateTime() {
        return (LocalDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, String, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Course.COURSE.ID;
    }

    @Override
    public Field<String> field2() {
        return Course.COURSE.NAME;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Course.COURSE.CREATE_TIME;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return Course.COURSE.UPDATE_TIME;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public LocalDateTime component3() {
        return getCreateTime();
    }

    @Override
    public LocalDateTime component4() {
        return getUpdateTime();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public LocalDateTime value3() {
        return getCreateTime();
    }

    @Override
    public LocalDateTime value4() {
        return getUpdateTime();
    }

    @Override
    public CourseRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public CourseRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public CourseRecord value3(LocalDateTime value) {
        setCreateTime(value);
        return this;
    }

    @Override
    public CourseRecord value4(LocalDateTime value) {
        setUpdateTime(value);
        return this;
    }

    @Override
    public CourseRecord values(Long value1, String value2, LocalDateTime value3, LocalDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CourseRecord
     */
    public CourseRecord() {
        super(Course.COURSE);
    }

    /**
     * Create a detached, initialised CourseRecord
     */
    public CourseRecord(Long id, String name, LocalDateTime createTime, LocalDateTime updateTime) {
        super(Course.COURSE);

        set(0, id);
        set(1, name);
        set(2, createTime);
        set(3, updateTime);
    }
}
